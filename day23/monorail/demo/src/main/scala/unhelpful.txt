
@main
def hello(): Unit = {
  var a : Int = 0
  var b : Int = 0
  var c : Int = 0
  var d : Int = 0
  var i : Int = 0
  println("Hello world!");
  println(msg);
  var v : Array[Any] = Array(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19.20,21,22,23);
  println(v)
  println(v(0))
  println(v(1))
  println(v(2))

 /*  for some reason scala will not let me call a procedure stored in an array
  so we need a work around ,
  use continuations 
 */

  val v0 = () => {println("v(0) called") ; a = 1 ; i = i + 1} ; // cpy 1 a
  v(0) = v0
  v(1) = () => {b = 1 ; i = i + 1} ; // cpy 1 b
  v(2) = () => {d = 26 ; i = i + 1} ; //cpy 26 d
  v(3) = () => {if c != 0 then i = i + 2 else i = i + 1} ;  // jnz c 2
  v(4) = () => {i = i + 5} ;  // jnz 1 5
  v(5) = () => {c = 7  ; i = i + 1} ; // cpy 7 c
  v(6) = () => {d = d + 1 ; i = i + 1} ; // inc d
  v(7) = () => {c = c - 1 ; i = i + 1} ; // dec c
  v(8) = () => {if c != 0 then i = i - 2 else i = i + 1} ;  // jnz c -2
  v(9) = () => {c = a ; i = i + 1} ;  // cpy a c
  v(10) = () => {a = a + 1 ; i = i + 1} ;  // inc a
  v(11) = () => {b = b - 1 ; i = i + 5} ;  // dec b
  v(12) = () => {if b != 0 then i = i - 2 else i = i + 1 } ;  // jnz b -2
  v(13) = () => {b = c ; i = i + 1} ;  // cpy c b 
  v(14) = () => {d = d - 1 ; i = i + 5} ;  // dec d
  v(15) = () => {if d != 0 then i = i - 6 else i = i + 1} ;  // jnz d -6 
  v(16) = () => {c = 18 ; i = i + 1} ;  // cpy 18 c
  v(17) = () => {d = 11 ; i = i + 1} ;  // cpy 11 d 
  v(18) = () => {a = a + 1 ; i = i + 1} ;  // inc a
  v(19) = () => {d = d - 1 ; i = i + 1} ;  // dec d
  v(20) = () => {if d != 0 then i = i - 2 else i = i + 1} ;  // jnz d -2
  v(21) = () => {c = c - 1 ; i = i + 1} ;  // dec c
  v(22) = () => {if c != 0 then i = i - 5 else i = i + 1 } ;  // jnz c -5

  /*
  while( i >= 0 && i < 23) {
    println(s"i = $i")
    v(i)
  }
   */

  println(s"a = $a")
  println(s"b = $b")
  println(s"c = $c")
  println(s"d = $d")

  i = 0
  println(s"i = $i")
  v0()
  println(s"i = $i")
  

}

def msg = "I was compiled by Scala 3. :)"

  
